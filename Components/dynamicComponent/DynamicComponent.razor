@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.CompilerServices;
@using System.Reflection;
@if (render)
{
    @dynamicComponent

}


@code{
    
    private object fieldValue;
     [Parameter]
    public Type type{get;set;}
    private bool render { get; set; } = false;
    [Parameter]
    public PropertyInfo Prop{get;set;}
    [Parameter]
    public string ComponentName { get; set; }
    [Parameter]
    public EventCallback<object> OnValueChange { get; set; }

    protected override void OnInitialized()
    {
        render = true;
        base.OnInitialized();
    }

    RenderFragment dynamicComponent => builder =>
    {
        


        builder.OpenComponent(0, type);
        builder.AddAttribute(1, "Prop", type);
                builder.AddAttribute(2, "OnValueChange", 
            EventCallback.Factory.Create<object>(this, 
            RuntimeHelpers.CreateInferredEventCallback(this, __value => {fieldValue = __value;OnValueChange.InvokeAsync(fieldValue);}, fieldValue)));
        builder.CloseComponent();

    };

}